// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
}

enum VehicleStatus {
  IDLE
  RENTED
  RESERVED
  SERVICE
}

enum RentalStatus {
  ACTIVE
  RETURNED
  COMPLETED
  CANCELLED
}

enum RentalType {
  NEW
  EXTENSION
}

enum PaymentMethod {
  CASH
  TRANSFER
  CARD
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String   @map("password_hash")
  role         UserRole @default(ADMIN)
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("users")
}

model Vehicle {
  id           String        @id @default(cuid())
  plate        String        @unique
  name         String?
  active       Boolean       @default(true)
  status       VehicleStatus @default(IDLE)
  isConsignment Boolean      @default(false) @map("is_consignment")
  createdAt    DateTime      @default(now()) @map("created_at")

  rentals               Rental[]
  consignmentDeductions ConsignmentDeduction[]
  reservations          Reservation[]
  expenses              VehicleExpense[]

  @@map("vehicles")
}

model Customer {
  id       String @id @default(cuid())
  fullName String @map("full_name")
  phone    String?

  rentals          Rental[]
  externalPayments ExternalPayment[]
  reservations     Reservation[]

  @@map("customers")
}

model Rental {
  id          String       @id @default(cuid())
  vehicleId   String       @map("vehicle_id")
  customerId  String       @map("customer_id")
  rentalType  RentalType   @default(NEW) @map("rental_type")
  startDate   DateTime     @map("start_date")
  endDate     DateTime     @map("end_date")
  days        Int
  dailyPrice Int          @map("daily_price") // in kuruş (cents)
  kmDiff     Int          @default(0) @map("km_diff") // in kuruş
  cleaning   Int          @default(0) // in kuruş
  hgs        Int          @default(0) // in kuruş
  damage     Int          @default(0) // in kuruş
  fuel       Int          @default(0) // in kuruş
  totalDue   Int          @map("total_due") // computed: days*dailyPrice + kmDiff + cleaning + hgs + damage + fuel
  upfront    Int          @default(0) // in kuruş
  pay1       Int          @default(0) // in kuruş
  pay2       Int          @default(0) // in kuruş
  pay3       Int          @default(0) // in kuruş
  pay4       Int          @default(0) // in kuruş
  balance     Int // computed: totalDue - (upfront + pay1 + pay2 + pay3 + pay4 + sum(payments.amount))
  status      RentalStatus @default(ACTIVE)
  note        String?
  deleted     Boolean      @default(false) // Soft delete - silinmişse true
  deletedAt   DateTime?    @map("deleted_at") // Silinme tarihi
  completedAt DateTime?    @map("completed_at")
  createdAt   DateTime     @default(now()) @map("created_at")

  vehicle  Vehicle   @relation(fields: [vehicleId], references: [id])
  customer Customer  @relation(fields: [customerId], references: [id])
  payments Payment[]

  @@map("rentals")
}

model Payment {
  id       String        @id @default(cuid())
  rentalId String        @map("rental_id")
  amount   Int // in kuruş
  paidAt   DateTime      @map("paid_at")
  method   PaymentMethod

  rental Rental @relation(fields: [rentalId], references: [id])

  @@map("payments")
}

model ConsignmentRental {
  id          String   @id @default(cuid())
  generalNote String?  @map("general_note")
  createdAt   DateTime @default(now()) @map("created_at")

  consignmentDeductions ConsignmentDeduction[]
  externalPayments      ExternalPayment[]

  @@map("consignment_rentals")
}

model ConsignmentDeduction {
  id                   String            @id @default(cuid())
  consignmentRentalId  String            @map("consignment_rental_id")
  vehicleId            String            @map("vehicle_id")
  amount               Int // in kuruş
  description          String?
  createdAt            DateTime          @default(now()) @map("created_at")

  consignmentRental ConsignmentRental @relation(fields: [consignmentRentalId], references: [id])
  vehicle           Vehicle           @relation(fields: [vehicleId], references: [id])

  @@map("consignment_deductions")
}

model ExternalPayment {
  id                  String            @id @default(cuid())
  consignmentRentalId String            @map("consignment_rental_id")
  customerId          String            @map("customer_id")
  amount              Int // in kuruş
  description         String?
  createdAt           DateTime          @default(now()) @map("created_at")

  consignmentRental ConsignmentRental @relation(fields: [consignmentRentalId], references: [id])
  customer          Customer          @relation(fields: [customerId], references: [id])

  @@map("external_payments")
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model Reservation {
  id          String            @id @default(cuid())
  customerId  String            @map("customer_id")
  vehicleId   String            @map("vehicle_id")
  customerName String           @map("customer_name")
  licensePlate String           @map("license_plate")
  reservationDate DateTime      @map("reservation_date")
  reservationTime String        @map("reservation_time")
  rentalDuration  Int           @map("rental_duration") // gün cinsinden
  note        String?
  status      ReservationStatus @default(PENDING)
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")

  customer    Customer          @relation(fields: [customerId], references: [id])
  vehicle     Vehicle           @relation(fields: [vehicleId], references: [id])

  @@map("reservations")
}

// Araç Giderleri Tablosu
model VehicleExpense {
  id          String   @id @default(cuid())
  date        DateTime
  vehicleId   String   @map("vehicle_id")
  expenseType String   @map("expense_type") // LASTİK, BAKIM, ONARIM, vb.
  location    String   // İşin yapıldığı yer
  amount      Float    // Tutar (TL cinsinden)
  description String?  // Açıklama
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  vehicle     Vehicle  @relation(fields: [vehicleId], references: [id])

  @@map("vehicle_expenses")
}

// Notlar Tablosu
model Note {
  id        String   @id @default(cuid())
  rowIndex  Int      @map("row_index") // Satır numarası
  content   String   // Not içeriği
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("notes")
}
