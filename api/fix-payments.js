const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function fixPayments() {
  try {
    console.log('üîç Checking for inflated payments (> 100000 kuru≈ü = 1000 TL)...');
    
    // 100000 kuru≈ü (1000 TL) √ºzeri √∂demeleri bul - bunlar b√ºy√ºk ihtimalle hatalƒ±
    const inflatedPayments = await prisma.payment.findMany({
      where: {
        amount: {
          gt: 100000 // 1000 TL √ºzeri ≈ü√ºpheli
        }
      },
      include: {
        rental: {
          include: {
            customer: true,
            vehicle: true
          }
        }
      }
    });

    console.log(`Found ${inflatedPayments.length} potentially inflated payments:`);
    
    inflatedPayments.forEach(payment => {
      const currentTL = payment.amount / 100;
      const correctedTL = payment.amount / 10000; // 100 kat d√º≈ü√ºr
      console.log(`Payment ID: ${payment.id.substring(0, 8)}... - Current: ${currentTL} TL -> Should be: ${correctedTL} TL`);
      console.log(`  Rental: ${payment.rental.vehicle.plate} - ${payment.rental.customer?.name || 'No customer'}`);
    });

    if (inflatedPayments.length === 0) {
      console.log('‚úÖ No inflated payments found!');
      return;
    }

    console.log('\nüö® WARNING: This will divide all payments above 1000 TL by 100!');
    console.log('Press Ctrl+C to cancel, or wait 5 seconds to continue...');
    
    await new Promise(resolve => setTimeout(resolve, 5000));

    console.log('\nüîß Fixing payments...');
    
    // Batch update - t√ºm b√ºy√ºk √∂demeleri 100'e b√∂l
    const updateResult = await prisma.payment.updateMany({
      where: {
        amount: {
          gt: 100000 // 1000 TL √ºzeri
        }
      },
      data: {
        amount: {
          divide: 100 // Prisma doesn't support divide, we'll do it manually
        }
      }
    });

    console.log('‚ùå Prisma doesn\'t support divide operation in updateMany.');
    console.log('Fixing payments one by one...');

    // Manuel olarak tek tek d√ºzelt
    for (const payment of inflatedPayments) {
      const correctedAmount = Math.round(payment.amount / 100);
      await prisma.payment.update({
        where: { id: payment.id },
        data: { amount: correctedAmount }
      });
      
      console.log(`‚úÖ Fixed payment ${payment.id.substring(0, 8)}... : ${payment.amount/100} TL -> ${correctedAmount/100} TL`);
    }

    console.log('\nüîß Recalculating rental balances...');
    
    // Etkilenen rental'larƒ±n balance'larƒ±nƒ± yeniden hesapla
    const affectedRentalIds = [...new Set(inflatedPayments.map(p => p.rentalId))];
    
    for (const rentalId of affectedRentalIds) {
      const rental = await prisma.rental.findUnique({
        where: { id: rentalId },
        include: { payments: true }
      });

      if (rental) {
        const totalPayments = rental.payments.reduce((sum, p) => sum + p.amount, 0);
        const manualPayments = rental.upfront + rental.pay1 + rental.pay2 + rental.pay3 + rental.pay4;
        const newBalance = rental.totalDue - manualPayments - totalPayments;

        await prisma.rental.update({
          where: { id: rentalId },
          data: { balance: Math.max(0, newBalance) } // Negatif balance'ƒ± √∂nle
        });

        console.log(`‚úÖ Recalculated balance for rental ${rentalId.substring(0, 8)}... : ${newBalance/100} TL`);
      }
    }

    console.log('\n‚úÖ All payments and balances fixed!');

    // Sonu√ßlarƒ± kontrol et
    console.log('\nüìä Verification:');
    const fixedPayments = await prisma.payment.findMany({
      where: {
        id: { in: inflatedPayments.map(p => p.id) }
      }
    });

    fixedPayments.forEach(payment => {
      console.log(`Payment ${payment.id.substring(0, 8)}... : ${payment.amount/100} TL`);
    });

  } catch (error) {
    console.error('‚ùå Error fixing payments:', error);
  } finally {
    await prisma.$disconnect();
  }
}

fixPayments();
